#User function Template for python3
from collections import defaultdict, deque

class Solution:
    def findOrder(self,alien_dict, N, K):
        GRAPH = defaultdict(list)
        
        for i in range(1, N):
            str1, str2 = alien_dict[i-1], alien_dict[i]
            ans = self.fd_chars(str1, str2)
            
            if ans:
                GRAPH[ans[0]].append(ans[1])
                
        return self.top_sort(GRAPH, K)
                
    def fd_chars(self, str1, str2):
        for char1, char2 in zip(str1, str2):
            if char1 != char2:
                return (char1, char2)
        
        return []
        
    def top_sort(self, graph, k):
        INDEGREE, queue = defaultdict(int), deque()
        order = []
        
        for children in graph.values():
            for node in children:
                INDEGREE[node] += 1
                
        for i in range(k):
            curr_node = chr(97+i)
            if not INDEGREE[curr_node]:
                queue.append(curr_node)
                
        while queue:
            node = queue.popleft()
            order.append(node)
            
            for adj in graph[node]:
                if INDEGREE[adj]:
                    INDEGREE[adj] -= 1
                    
                    if not INDEGREE[adj]:
                        queue.append(adj)
                        
        return "".join(order)
        
#{ 
 # Driver Code Starts
#Initial Template for Python 3

class sort_by_order:
    def __init__(self,s):
        self.priority = {}
        for i in range(len(s)):
            self.priority[s[i]] = i
    
    def transform(self,word):
        new_word = ''
        for c in word:
            new_word += chr( ord('a') + self.priority[c] )
        return new_word
    
    def sort_this_list(self,lst):
        lst.sort(key = self.transform)

if __name__ == '__main__':
    t=int(input())
    for _ in range(t):
        line=input().strip().split()
        n=int(line[0])
        k=int(line[1])
        
        alien_dict = [x for x in input().strip().split()]
        duplicate_dict = alien_dict.copy()
        ob=Solution()
        order = ob.findOrder(alien_dict,n,k)
        s = ""
        for i in range(k):
            s += chr(97+i)
        l = list(order)
        l.sort()
        l = "".join(l)
        if s != l:
            print(0)
        else:
            x = sort_by_order(order)
            x.sort_this_list(duplicate_dict)
            
            if duplicate_dict == alien_dict:
                print(1)
            else:
                print(0)


# } Driver Code Ends
